#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Figure Index Generator for SSZ Suite

Generates FIGURE_INDEX.md with all plots, captions, and checksums.
Makes it easy for Carmen to find and reference figures in the paper.

© 2025 Carmen Wrede, Lino Casu
Licensed under the ANTI-CAPITALIST SOFTWARE LICENSE v1.4
"""
import hashlib
from pathlib import Path
from datetime import datetime
from tools.figure_captions import get_caption


def sha256_file(path):
    """Calculate SHA256 hash of a file"""
    h = hashlib.sha256()
    with open(path, "rb") as f:
        for chunk in iter(lambda: f.read(1 << 20), b""):
            h.update(chunk)
    return h.hexdigest()


def write_figure_index(figure_entries, index_path="reports/figures/FIGURE_INDEX.md"):
    """
    Write figure index with captions and metadata
    
    Args:
        figure_entries: List of dicts with keys:
            - object: Object name (e.g., "G79") or "shared"
            - name: Figure name (e.g., "ringchain_v_vs_k")
            - path: Path to figure file
            - caption: Caption text
            - format: File format (png, svg)
            - sha256: File checksum (optional)
        index_path: Output path for index file
    
    Returns:
        str: Path to created index file
    """
    Path(index_path).parent.mkdir(parents=True, exist_ok=True)
    
    lines = [
        "# SSZ Suite - Figure Index",
        "",
        f"**Generated:** {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC",
        "",
        "This index lists all figures generated by the SSZ pipeline for paper exports.",
        "Each figure is available in PNG (600 DPI) and SVG (vector) formats.",
        "",
        "---",
        ""
    ]
    
    # Group by object
    by_object = {}
    for entry in figure_entries:
        obj = entry.get("object", "unknown")
        by_object.setdefault(obj, []).append(entry)
    
    # Sort objects: shared last, others alphabetically
    objects = sorted([o for o in by_object.keys() if o != "shared"])
    if "shared" in by_object:
        objects.append("shared")
    
    for obj in objects:
        entries = by_object[obj]
        
        # Object header
        if obj == "shared":
            lines.append("## Shared Figures (Cross-Object)")
        else:
            lines.append(f"## {obj}")
        lines.append("")
        
        # Group by base name (without format extension)
        by_name = {}
        for entry in entries:
            name = entry["name"]
            by_name.setdefault(name, []).append(entry)
        
        # List figures
        for name in sorted(by_name.keys()):
            formats = by_name[name]
            
            # Caption
            caption = formats[0].get("caption", "")
            if not caption:
                caption = get_caption(name, obj if obj != "shared" else None)
            
            lines.append(f"### {name.replace('_', ' ').title()}")
            lines.append("")
            lines.append(f"**Caption:** {caption}")
            lines.append("")
            
            # Files
            lines.append("**Files:**")
            for fmt_entry in sorted(formats, key=lambda x: x.get("format", "")):
                rel_path = Path(fmt_entry["path"]).as_posix()
                fmt = fmt_entry.get("format", "")
                sha = fmt_entry.get("sha256", "")
                
                lines.append(f"- **{fmt.upper()}**: `{rel_path}`")
                if sha:
                    lines.append(f"  - SHA256: `{sha[:16]}...`")
            
            lines.append("")
        
        lines.append("---")
        lines.append("")
    
    # Write index
    Path(index_path).write_text("\n".join(lines), encoding="utf-8")
    return str(index_path)


def add_figure_to_index(figure_path, object_name, figure_name, caption=None, 
                        index_path="reports/figures/FIGURE_INDEX.md"):
    """
    Add single figure to index (incremental update)
    
    Args:
        figure_path: Path to figure file
        object_name: Object name or "shared"
        figure_name: Figure name (without prefix)
        caption: Optional custom caption
        index_path: Path to index file
    
    Returns:
        dict: Entry dict
    """
    entry = {
        "object": object_name,
        "name": figure_name,
        "path": str(figure_path),
        "format": Path(figure_path).suffix[1:],  # Remove leading dot
        "sha256": sha256_file(figure_path) if Path(figure_path).exists() else None,
        "caption": caption or get_caption(figure_name, object_name if object_name != "shared" else None)
    }
    
    return entry


def scan_figure_directory(figure_root="reports/figures"):
    """
    Scan figure directory and generate entries automatically
    
    Args:
        figure_root: Root directory containing figures
    
    Returns:
        list: List of figure entries
    """
    figure_root = Path(figure_root)
    if not figure_root.exists():
        return []
    
    entries = []
    
    for obj_dir in figure_root.iterdir():
        if not obj_dir.is_dir():
            continue
        
        obj_name = obj_dir.name
        
        for fig_file in obj_dir.glob("fig_*.

*"):
            if fig_file.suffix not in [".png", ".svg", ".pdf"]:
                continue
            
            # Extract figure name from filename
            # Format: fig_{obj}_{name}.{ext} or fig_shared_{name}.{ext}
            stem = fig_file.stem
            if stem.startswith(f"fig_{obj_name}_"):
                fig_name = stem.replace(f"fig_{obj_name}_", "")
            elif stem.startswith("fig_shared_"):
                fig_name = stem.replace("fig_shared_", "")
            else:
                fig_name = stem.replace("fig_", "")
            
            entry = add_figure_to_index(
                figure_path=fig_file,
                object_name=obj_name,
                figure_name=fig_name
            )
            entries.append(entry)
    
    return entries


if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1:
        # Scan directory and generate index
        figure_root = sys.argv[1]
        entries = scan_figure_directory(figure_root)
        index_path = write_figure_index(entries, 
                                        index_path=Path(figure_root) / "FIGURE_INDEX.md")
        print(f"✅ Figure index written: {index_path}")
        print(f"   Found {len(entries)} figures")
    else:
        print("Usage: python -m tools.figure_index <figure_root>")
        print("Example: python -m tools.figure_index reports/figures")
