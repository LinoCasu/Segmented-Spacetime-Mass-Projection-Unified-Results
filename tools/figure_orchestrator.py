#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Figure Orchestrator for SSZ Suite - Complete Paper Export Pipeline

Generates all figures, creates index, updates manifest.
This is the "copy-paste-ready" orchestration from Lino's snippet.

© 2025 Carmen Wrede, Lino Casu
Licensed under the ANTI-CAPITALIST SOFTWARE LICENSE v1.4
"""
import os
from pathlib import Path
from tools.plot_helpers import line, scatter, heatmap
from tools.io_utils import update_manifest, sha256_file
from tools.figure_catalog import CAPTIONS


def _fig_base(fig_root, obj, name):
    """Generate base path for figure"""
    return str(Path(fig_root) / obj / f"fig_{obj}_{name}")


def generate_figures(fig_root, obj, datasets, formats=("png", "svg"), dpi=600, width_mm=160):
    """
    Generate all figures for an object
    
    Args:
        fig_root: Root directory for figures (e.g., "reports/figures")
        obj: Object name (e.g., "G79", "CygnusX")
        datasets: Dict with data arrays
            Required keys: "k", "v", "log_gamma", "gamma", "nu_out"
        formats: Tuple of formats to generate
        dpi: PNG resolution
        width_mm: Figure width in millimeters
    
    Returns:
        list: Paths to all generated figures
    
    Example:
        datasets = {
            "k": [1, 2, 3, 4, 5],
            "v": [12.5, 13.2, 14.1, 15.0, 16.2],
            "log_gamma": [0.0, 0.1, 0.2, 0.3, 0.4],
            "gamma": [1.0, 1.1, 1.2, 1.3, 1.4],
            "nu_out": [1e12, 9e11, 8e11, 7e11, 6e11]
        }
        paths = generate_figures("reports/figures", "G79", datasets)
    """
    paths = []
    
    # 1) Velocity vs Ring Index
    if "k" in datasets and "v" in datasets:
        p = _fig_base(fig_root, obj, "ringchain_v_vs_k")
        paths += line(
            datasets["k"], datasets["v"],
            "Ring index k", "Velocity v_k [km/s]",
            f"{obj}: Ring-chain velocity",
            p, formats=formats, dpi=dpi, width_mm=width_mm
        )
    
    # 2) Log Gamma vs Ring Index
    if "k" in datasets and "log_gamma" in datasets:
        p = _fig_base(fig_root, obj, "gamma_log_vs_k")
        paths += line(
            datasets["k"], datasets["log_gamma"],
            "Ring index k", "log γ",
            f"{obj}: Cumulative time-density",
            p, formats=formats, dpi=dpi, width_mm=width_mm
        )
    
    # 3) Frequency Shift vs Gamma
    if "gamma" in datasets and "nu_out" in datasets:
        p = _fig_base(fig_root, obj, "freqshift_vs_gamma")
        paths += scatter(
            datasets["gamma"], datasets["nu_out"],
            "γ", "ν_out [arb.]",
            f"{obj}: Frequency shift",
            p, formats=formats, dpi=dpi, width_mm=width_mm
        )
    
    # TODO: Add more figures as needed
    # - residuals_model_vs_obs
    # - posterior_corner
    # - uncertainty_bands_v_vs_k
    # - line_ratios_vs_radius
    # - radio_spectral_index
    
    return paths


def write_figure_index(index_path, entries):
    """
    Write figure index with captions
    
    Args:
        index_path: Path to index file (e.g., "reports/figures/FIGURE_INDEX.md")
        entries: List of dicts with keys: "obj", "name", "path", "caption"
    
    Example:
        entries = [
            {
                "obj": "G79",
                "name": "ringchain_v_vs_k",
                "path": "figures/G79/fig_G79_ringchain_v_vs_k.png",
                "caption": "Ring-chain velocity..."
            }
        ]
        write_figure_index("reports/figures/FIGURE_INDEX.md", entries)
    """
    lines = ["# SSZ Suite - Figure Index\n"]
    lines.append("**Generated:** Auto-generated by figure_orchestrator.py\n")
    lines.append("**Purpose:** Paper-ready figures with captions\n\n")
    
    # Group by object
    by_obj = {}
    for e in entries:
        by_obj.setdefault(e["obj"], []).append(e)
    
    # Write sections
    for obj, ents in sorted(by_obj.items()):
        lines.append(f"\n## {obj}\n")
        for e in sorted(ents, key=lambda x: x["name"]):
            lines.append(f"\n### {e['name'].replace('_', ' ').title()}\n")
            lines.append(f"**Caption:** {e['caption']}\n\n")
            lines.append(f"**Files:**\n")
            
            # Find all formats for this figure
            base_path = Path(e['path']).with_suffix('')
            for fmt in ['png', 'svg']:
                p = base_path.with_suffix(f'.{fmt}')
                if p.exists():
                    rel_path = p.as_posix()
                    lines.append(f"- `{rel_path}`\n")
    
    # Write index file
    Path(index_path).parent.mkdir(parents=True, exist_ok=True)
    Path(index_path).write_text("\n".join(lines), encoding="utf-8")
    
    return index_path


def finalize_figures(args, obj, datasets):
    """
    Main orchestration function - call this at the end of your pipeline
    
    Args:
        args: Argparse namespace with figure settings
            Required attributes: fig, fig_formats, fig_dpi, fig_width_mm, fig_out
        obj: Object name (e.g., "G79")
        datasets: Dict with data arrays
    
    Example (in run_all_ssz_terminal.py):
        if args.fig:
            from tools.figure_orchestrator import finalize_figures
            datasets = {
                "k": ring_indices,
                "v": velocities,
                "log_gamma": np.log(gamma),
                "gamma": gamma,
                "nu_out": nu_out
            }
            finalize_figures(args, "G79", datasets)
    """
    if not args.fig:
        return
    
    # Parse formats
    formats = tuple([f.strip() for f in args.fig_formats.split(",") if f.strip()])
    
    # Generate figures
    print(f"\n[SSZ] Generating figures for {obj}...")
    paths = generate_figures(
        args.fig_out, obj, datasets,
        formats=formats,
        dpi=args.fig_dpi,
        width_mm=args.fig_width_mm
    )
    
    # Build manifest entries
    entries = []
    arts = []
    
    for p in paths:
        # Extract figure name
        stem = Path(p).stem
        if f"fig_{obj}_" in stem:
            name = stem.split(f"fig_{obj}_", 1)[1]
        else:
            name = stem
        
        # Get caption
        caption = CAPTIONS.get(name, f"Figure: {name}")
        
        # Store entry
        entries.append({
            "obj": obj,
            "name": name,
            "path": Path(p).as_posix(),
            "caption": caption
        })
        
        # Store artifact
        arts.append({
            "role": "figure",
            "path": Path(p).as_posix(),
            "sha256": sha256_file(p),
            "format": Path(p).suffix[1:]
        })
    
    # Update manifest
    manifest_path = "reports/PAPER_EXPORTS_MANIFEST.json"
    update_manifest(manifest_path, {"artifacts": arts})
    
    # Write index
    idx = write_figure_index(
        Path(args.fig_out) / "FIGURE_INDEX.md",
        entries
    )
    update_manifest(manifest_path, {"figure_index": str(Path(idx).as_posix())})
    
    # Console output
    print(f"\n[SSZ] Figures written:")
    for p in paths:
        print(f"  - {p}")
    print(f"\nIndex: {idx}")
    print(f"Manifest: {manifest_path}\n")
